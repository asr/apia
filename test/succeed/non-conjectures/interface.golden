ret > ExitSuccess
out > Interface
out >   source hash: 16987302680121282013
out >   imported modules: []
out >   module name: Foo
out >   scope: fromList [(MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]},Scope {scopeName = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, scopeParents = [MName {mnameToList = []}], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(foo,[AbsName {anameName = QName {qnameModule = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, qnameName = Name {nameId = 2@17493595450351712124, nameConcrete = foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:12,11-14, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}}, anameKind = DefName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [QName {qnameModule = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, qnameName = Name {nameId = 2@17493595450351712124, nameConcrete = foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:12,11-14, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}}]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing})]
out >   inside scope: ScopeInfo {scopeCurrent = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, scopeModules = fromList [(MName {mnameToList = []},Scope {scopeName = MName {mnameToList = []}, scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]},Scope {scopeName = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, scopeParents = [MName {mnameToList = []}], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(foo,[AbsName {anameName = QName {qnameModule = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, qnameName = Name {nameId = 2@17493595450351712124, nameConcrete = foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:12,11-14, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}}, anameKind = DefName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [QName {qnameModule = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, qnameName = Name {nameId = 2@17493595450351712124, nameConcrete = foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:12,11-14, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}}]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing})], scopeLocals = [], scopePrecedence = TopCtx, scopeInverseName = fromList [], scopeInverseModule = fromList [], scopeInScope = fromList []}
out >   signature: Sig {_sigSections = fromList [(MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]},Section {_secTelescope = EmptyTel})], _sigDefinitions = fromList [(QName {qnameModule = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, qnameName = Name {nameId = 2@17493595450351712124, nameConcrete = foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:12,11-14, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}},Defn {defArgInfo = ArgInfo {argInfoHiding = NotHidden, argInfoRelevance = Relevant, argInfoOrigin = UserWritten}, defName = QName {qnameModule = MName {mnameToList = [Name {nameId = 0@17493595450351712124, nameConcrete = Foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:10,8-11, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}]}, qnameName = Name {nameId = 2@17493595450351712124, nameConcrete = foo, nameBindingSite = /home/asr/src/apia/apia/test/succeed/non-conjectures/Foo.agda:12,11-14, nameFixity = Fixity' {theFixity = Fixity {fixityRange = , fixityLevel = Unrelated, fixityAssoc = NonAssoc}, theNotation = [], theNameRange = }}}, defType = El {_getSort = Type (Max [ClosedLevel 1]), unEl = Sort (Type (Max []))}, defPolarity = [], defArgOccurrences = [], defDisplay = [], defMutual = MutId 0, defCompiledRep = fromList [], defInstance = Nothing, defCopy = False, defMatchable = False, defNoCompilation = False, defInjective = False, theDef = Axiom {axTPTPRole = Nothing, axTPTPHints = []}})], _sigRewriteRules = fromList []}
out >   display: fromList []
out >   builtin: fromList []
out >   Foreign code: fromList []
out >   highlighting: CompressedFile {ranges = [(Range {from = 1, to = 79},Aspects {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 80, to = 93},Aspects {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 94, to = 172},Aspects {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 174, to = 177},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 178, to = 185},Aspects {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 186, to = 199},Aspects {aspect = Just Option, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 213, to = 216},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 217, to = 220},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 221, to = 228},Aspects {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 229, to = 245},Aspects {aspect = Just Option, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 256, to = 259},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 260, to = 263},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 264, to = 271},Aspects {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 272, to = 298},Aspects {aspect = Just Option, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 299, to = 302},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 303, to = 306},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 307, to = 314},Aspects {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 315, to = 326},Aspects {aspect = Just Option, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 342, to = 345},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 347, to = 353},Aspects {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 354, to = 357},Aspects {aspect = Just (Name (Just Module) False), otherAspects = [], note = Nothing, definitionSite = Just (DefinitionSite {defSiteModule = TopLevelModuleName {moduleNameRange = , moduleNameParts = ["Foo"]}, defSitePos = 1, defSiteHere = False, defSiteAnchor = Just "Foo"})}),(Range {from = 358, to = 363},Aspects {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 365, to = 374},Aspects {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 375, to = 378},Aspects {aspect = Just (Name (Just Postulate) False), otherAspects = [], note = Nothing, definitionSite = Just (DefinitionSite {defSiteModule = TopLevelModuleName {moduleNameRange = , moduleNameParts = ["Foo"]}, defSitePos = 375, defSiteHere = True, defSiteAnchor = Just "foo"})}),(Range {from = 379, to = 380},Aspects {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 381, to = 384},Aspects {aspect = Just PrimitiveType, otherAspects = [], note = Nothing, definitionSite = Nothing})]}
out >   pragma options: [["--exact-split"],["--no-sized-types"],["--no-universe-polymorphism"],["--without-K"]]
out >   pattern syns: fromList []
out >   warnings: []
out >
