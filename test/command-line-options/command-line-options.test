#1. --help
dist/build/apia/apia --help
<<<
>>>
Usage: apia [OPTIONS] FILE

          --atp=NAME                      Set the ATP (e, equinox, ileancop, metis, spass, vampire)
                                          (default: e, equinox, and vampire).
          --check                         Check the syntax of the generated TPTP files using the
                                          tptp4X program from the TPTP library.
          --dump-agdai                    Dump the Agda interface file to stdout.
          --dump-qnames                   Dump Agda QNames information to stdout.
          --help                          Show this help.
  -i DIR  --include-path=DIR              Look for imports in DIR.
          --only-files                    Do not call the ATPs, only to create the TPTP files.
          --output-dir=DIR                Directory in which the TPTP files are placed (default: /tmp).
          --snapshot-dir=DIR              Directory where is the snapshot of the TPTP files
                                          (default: snapshot).
          --snapshot-no-error             A difference in the snapshot-test does not generate an error
                                          (implies --snapshot-test).
          --snapshot-test                 Compare the generated TPTP files against a snapshot of them.
          --time=NUM                      Set timeout for the ATPs in seconds (default: 240).
          --unproven-conjecture-no-error  An unproven TPTP conjecture does not generate an error.
          --vampire-exec=COMMAND          Set the Vampire executable (default: vampire_lin64).
  -v N    --verbose=N                     Set verbosity level to N.
          --version                       Show version number.
          --with-function-constants       Use a hard-coded binary function symbol for the translation
                                          of functions (required for handling currying).
          --without-predicate-constants   Do not use hard-coded (n+1)-ary predicate symbols for the
                                          translation of n-ary predicates.

>>>2
>>>= 0

#2. --only-files
dist/build/apia/apia -itest/command-line-options --only-files test/command-line-options/TrivialTheorem.agda
<<<
>>>
Created /tmp/TrivialTheorem/16-foo.tptp
>>>2
>>>= 0

#3. --verbose
dist/build/apia/apia -itest/command-line-options -v1 --only-files test/command-line-options/TrivialTheorem.agda
<<<
>>>
Created /tmp/TrivialTheorem/16-foo.tptp
>>>2
>>>= 0

#4. --version
dist/build/apia/apia --version
<<<
>>>
Apia version 0.9.1
>>>2
>>>= 0

#5. --unproven-conjecture-no-error
dist/build/apia/apia -itest/command-line-options --atp=e --unproven-conjecture-no-error test/command-line-options/NoTheorem.agda
<<<
>>>
Proving the conjecture in /tmp/NoTheorem/13-foo.tptp
E 1.8-001 Gopaldhara *did not* prove the conjecture
the ATP(s) did not prove the conjecture in /tmp/NoTheorem/13-foo.tptp
>>>2
>>>= 0

#6. --snapshot-no-error
dist/build/apia/apia -itest/command-line-options --only-files --output-dir=/tmp/snapshot test/command-line-options/TrivialTheorem.agda && sed -i '$ d' /tmp/snapshot/TrivialTheorem/16-foo.tptp && dist/build/apia/apia -itest/command-line-options --snapshot-no-error --snapshot-dir=/tmp/snapshot test/command-line-options/TrivialTheorem.agda
<<<
>>>
Created /tmp/snapshot/TrivialTheorem/16-foo.tptp
the files are different:
/tmp/TrivialTheorem/16-foo.tptp
/tmp/snapshot/TrivialTheorem/16-foo.tptp
>>>2
>>>= 0

#7. --dump-agdai
dist/build/apia/apia -itest/command-line-options --dump-agdai test/command-line-options/Foo.agda
<<<
>>>
Interface {iSourceHash = 2668942679252171057, iImportedModules = [], iModuleName = Foo, iScope = fromList [(Foo,* scope Foo
  public
    names
      foo --> [Foo.foo]
)], iInsideScope = ScopeInfo
  current = Foo
  context = TopCtx
  modules
    * scope 
    * scope Foo
      public
        names
          foo --> [Foo.foo]
, iSignature = Sig {sigSections = fromList [(Foo,Section {secTelescope = EmptyTel, secFreeVars = 0})], sigDefinitions = fromList [(Foo.foo,Defn {defArgInfo = ArgInfo {argInfoHiding = NotHidden, argInfoRelevance = Relevant, argInfoColors = []}, defName = Foo.foo, defType = El {getSort = Type (Max [ClosedLevel 1]), unEl = Sort (Type (Max []))}, defPolarity = [], defArgOccurrences = [], defDisplay = [], defMutual = MutId 0, defCompiledRep = CompiledRep {compiledHaskell = Nothing, exportHaskell = Nothing, compiledEpic = Nothing, compiledJS = Nothing}, defRewriteRules = [], defInstance = Nothing, theDef = Axiom {axATPRole = Nothing, axATPHints = []}})]}, iBuiltin = fromList [], iHaskellImports = fromList [], iHighlighting = CompressedFile {ranges = [(Range {from = 1, to = 79},MetaInfo {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 80, to = 93},MetaInfo {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 94, to = 172},MetaInfo {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 174, to = 180},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 181, to = 184},MetaInfo {aspect = Just (Name (Just Module) False), otherAspects = [], note = Nothing, definitionSite = Just (TopLevelModuleName {moduleNameParts = ["Foo"]},1)}),(Range {from = 185, to = 190},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 192, to = 201},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 202, to = 205},MetaInfo {aspect = Just (Name (Just Postulate) False), otherAspects = [], note = Nothing, definitionSite = Just (TopLevelModuleName {moduleNameParts = ["Foo"]},202)}),(Range {from = 206, to = 207},MetaInfo {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 208, to = 211},MetaInfo {aspect = Just PrimitiveType, otherAspects = [], note = Nothing, definitionSite = Nothing})]}, iPragmaOptions = [], iPatternSyns = fromList []}
>>>2
>>>= 0

#8. --dump-qnames
dist/build/apia/apia -itest/command-line-options --dump-qnames test/command-line-options/Foo.agda
<<<
>>>
Qname: Foo.foo
Type: El {getSort = Type (Max [ClosedLevel 1]), unEl = Sort (Type (Max []))}
Concrete name range: /home/asr/code/phd/repos/apia/test/command-line-options/Foo.agda:7,11-14
nameBindingSite range: /home/asr/code/phd/repos/apia/test/command-line-options/Foo.agda:7,11-14

>>>2
>>>= 0
