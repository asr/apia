name:          apia
version:       0.9.1
build-type:    Simple
cabal-version: >= 1.8
author:        Andrés Sicard-Ramírez
license:       MIT
license-file:  LICENSE
maintainer:    Andrés Sicard-Ramírez <asr@eafit.edu.co>
category:      Dependent types
homepage:      https://github.com/asr/apia
bug-reports:   https://github.com/asr/apia/issues/
synopsis:      Program for proving first-order formulae written in Agda using ATPs
tested-with:   GHC == 7.8.4
description:
  This package provides a program for proving first-order
  theorems written in the dependently typed language Agda
  <http://wiki.portal.chalmers.se/agda/pmwiki.php> using first-order
  automatic theorem provers (ATPs), via the translation of the Agda
  formulae to the TPTP format which is a standard for input and output
  for the ATPs <http://www.cs.miami.edu/~tptp/>.

extra-source-files: src/undefined.h

source-repository head
  type:     git
  location: git://github.com/asr/apia.git

executable apia
  main-is:        Main.hs
  hs-source-dirs: src
  include-dirs:   src

  build-depends:   Agda == 2.4.3.1
                 , base >= 4.6.0.1 && < 4.9
                 , bytestring >= 0.10.0.2 && < 0.11
                 , directory >= 1.2.0.1 && < 1.3
                 , filepath >= 1.3.0.1 && < 1.5
                 , process >= 1.1.0.2 && < 1.3
                 , regex-compat >= 0.95.1 && < 0.96
                 , safe >= 0.3.5 && < 0.4
                 , text >= 0.11.3.1 && < 1.3
                 -- tranformers 0.4.0.0 was deprecated.
                 , transformers >= 0.3 && < 0.4 || >= 0.4.1.0 && < 0.5
                 , unordered-containers >= 0.2.5.0 && < 0.3

  build-tools: cpphs >= 1.19 && < 1.20

  other-modules:
    ATPs
    CheckTPTP
    Common
    Dump
    FOL.Constants
    FOL.Primitives
    FOL.Translation.ClauseBody
    FOL.Translation.Functions
    FOL.Translation.Name
    FOL.Translation.Terms
    FOL.Translation.Types
    FOL.Types
    Monad.Base
    Monad.Environment
    Monad.Reports
    Options
    Snapshot
    TPTP.ConcreteSyntax.Common
    TPTP.ConcreteSyntax.FOF
    TPTP.ConcreteSyntax.TFF0
    TPTP.Files
    TPTP.Translation
    TPTP.Types
    Utils.AgdaAPI.DeBruijn
    Utils.AgdaAPI.EtaExpansion
    Utils.AgdaAPI.IgnoreSharing
    Utils.AgdaAPI.Interface
    Utils.AgdaAPI.RemoveProofTerms
    Utils.AgdaAPI.Vars
    Utils.Except
    Utils.File
    Utils.List
    Utils.Monad
    Utils.Names
    Utils.Show
    Utils.String
    Utils.Text
    Utils.Version
    Paths_apia

  ghc-options:
    -w
    -Werror
    -- Using cpphs as the C preprocessor.
    -pgmP cpphs -optP --cpp

  if impl(ghc >= 7.6)
     ghc-options:
       -- The following flag isn't documented in GHC 7.10.1.
       -fwarn-alternative-layout-rule-transitional
       -fwarn-deprecated-flags
       -fwarn-dodgy-exports
       -fwarn-dodgy-foreign-imports
       -fwarn-dodgy-imports
       -fwarn-duplicate-exports
       -fwarn-hi-shadowing
       -fwarn-identities
       -fwarn-incomplete-patterns
       -fwarn-incomplete-record-updates
       -fwarn-incomplete-uni-patterns
       -fwarn-missing-fields
       -- 18 July 2014. We cannot enable this flag because we are
       -- using the Paths_apia module.
       -- -fwarn-missing-import-lists
       -fwarn-missing-local-sigs
       -fwarn-missing-methods
       -fwarn-missing-signatures
       -fwarn-monomorphism-restriction
       -fwarn-name-shadowing
       -fwarn-orphans
       -fwarn-overlapping-patterns
       -fwarn-pointless-pragmas
       -fwarn-tabs
       -fwarn-type-defaults
       -fwarn-unrecognised-pragmas
       -fwarn-unused-binds
       -fwarn-unused-do-bind
       -fwarn-unused-imports
       -fwarn-unused-matches
       -fwarn-unsupported-calling-conventions
       -fwarn-warnings-deprecations
       -fwarn-wrong-do-bind

  if impl(ghc >= 7.8)
     ghc-options:
       -fwarn-duplicate-constraints
       -fwarn-empty-enumerations
       -fwarn-inline-rule-shadowing
       -fwarn-overflowed-literals
       -fwarn-typed-holes
       -fwarn-unrecognised-pragmas
       -fwarn-unsupported-llvm-version

  -- The following flag generates warnings with GHC 7.10.1.
  if impl(ghc < 7.10)
     ghc-options: -fwarn-auto-orphans

  if impl(ghc >= 7.10)
     ghc-options:
       -fwarn-deriving-typeable
       -fwarn-context-quantification
       -fwarn-unticked-promoted-constructors

  -- From Agda.cabal: If someone installs Agda with the setuid bit
  -- set, then the presence of +RTS may be a security problem (see GHC
  -- bug #3910).  However, we sometimes recommend people to use +RTS
  -- to control Agda's memory usage, so we want this functionality
  -- enabled by default.
  ghc-options: -rtsopts

  ghc-prof-options: -fprof-auto
