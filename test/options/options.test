#1. --help
dist/build/apia/apia --help
<<<
>>>
Usage: apia [OPTIONS] FILE

          --atp=NAME                      set the ATP (e, equinox, ileancop, metis, spass, vampire)
                                          (default: e, equinox, and vampire)
          --dump-agdai                    dump the Agda interface file to stdout
          --dump-types                    dump type information to stdout
          --help                          show this help
  -i DIR  --include-path=DIR              look for imports in DIR
          --not-check                     no check the syntax of the generated TPTP files
                                          using the tptp4X program from the TPTP library
          --only-files                    do not call the ATPs, only to create the TPTP files
          --output-dir=DIR                directory in which TPTP files are placed (default: /tmp)
          --snapshot-dir=DIR              directory where is the snapshot of the TPTP files
                                          (default: snapshot)
          --snapshot-no-error             a difference in the snapshot-test does not generate an error
                                          (implies --snapshot-test)
          --snapshot-test                 compare the generated TPTP files against a snapshot of them
          --time=NUM                      set timeout for the ATPs in seconds (default: 300)
          --unproven-conjecture-no-error  an unproven TPTP conjecture does not generate an error
          --vampire-exec=COMMAND          set the vampire executable (default: vampire_lin64)
  -v N    --verbose=N                     set verbosity level to N
          --version                       show version number
          --with-function-constants       use a hard-coded binary function symbol for the translation
                                          of functions (required for handling currying)
          --without-predicate-constants   do not use hard-coded (n+1)-ary predicate symbols for the
                                          translation of n-ary predicates

>>>2
>>>= 0

#2. --only-files
dist/build/apia/apia -itest/options --only-files test/options/TrivialTheorem.agda
<<<
>>>
Created /tmp/TrivialTheorem/18-foo.tptp
>>>2
>>>= 0

#3. --verbose
dist/build/apia/apia -itest/options -v1 --only-files test/options/TrivialTheorem.agda
<<<
>>>
Created /tmp/TrivialTheorem/18-foo.tptp
>>>2
>>>= 0

#4. --version
dist/build/apia/apia --version
<<<
>>>
Apia version 0.9.1
>>>2
>>>= 0

#5. --unproven-conjecture-no-error
dist/build/apia/apia -itest/options --atp=e --unproven-conjecture-no-error test/options/NoTheorem.agda
<<<
>>>
Proving the conjecture in /tmp/NoTheorem/15-foo.tptp ...
E 1.7 Jun Chiabari *did not* prove the conjecture
The ATP(s) did not prove the conjecture in /tmp/NoTheorem/15-foo.tptp
>>>2
>>>= 0

#6. --snapshot-no-error
dist/build/apia/apia -itest/options --only-files --output-dir=/tmp/snapshot test/options/TrivialTheorem.agda && sed -i '$ d' /tmp/snapshot/TrivialTheorem/18-foo.tptp && dist/build/apia/apia -itest/options --snapshot-no-error --snapshot-dir=/tmp/snapshot test/options/TrivialTheorem.agda
<<<
>>>
Created /tmp/snapshot/TrivialTheorem/18-foo.tptp
The files are different:
/tmp/TrivialTheorem/18-foo.tptp
/tmp/snapshot/TrivialTheorem/18-foo.tptp
>>>2
>>>= 0

#7. --dump-agdai
dist/build/apia/apia -itest/options --dump-agdai test/options/Foo.agda
<<<
>>>
Interface {iImportedModules = [], iModuleName = Foo, iScope = fromList [(Foo,* scope Foo
  public
    names
      foo --> [Foo.foo]
)], iInsideScope = ScopeInfo
  current = Foo
  context = TopCtx
  modules
    * scope 
    * scope Foo
      public
        names
          foo --> [Foo.foo]
, iSignature = Sig {sigSections = fromList [(Foo,Section {secTelescope = EmptyTel, secFreeVars = 0})], sigDefinitions = fromList [(Foo.foo,Defn {defArgInfo = ArgInfo {argInfoHiding = NotHidden, argInfoRelevance = Relevant, argInfoColors = []}, defName = Foo.foo, defType = El {getSort = Type (Max [ClosedLevel 1]), unEl = Sort (Type (Max []))}, defPolarity = [], defArgOccurrences = [], defDisplay = [], defMutual = MutId 0, defCompiledRep = CompiledRep {compiledHaskell = Nothing, compiledEpic = Nothing, compiledJS = Nothing}, theDef = Axiom {axATPRole = Nothing, axATPHints = []}})]}, iBuiltin = fromList [], iHaskellImports = fromList [], iHighlighting = CompressedFile {ranges = [(Range {from = 1, to = 79},MetaInfo {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 80, to = 93},MetaInfo {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 94, to = 172},MetaInfo {aspect = Just Comment, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 174, to = 177},MetaInfo {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 178, to = 185},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 213, to = 216},MetaInfo {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 217, to = 220},MetaInfo {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 221, to = 228},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 241, to = 244},MetaInfo {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 246, to = 252},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 253, to = 256},MetaInfo {aspect = Just (Name (Just Module) False), otherAspects = [], note = Nothing, definitionSite = Just (TopLevelModuleName {moduleNameParts = ["Foo"]},1)}),(Range {from = 257, to = 262},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 264, to = 273},MetaInfo {aspect = Just Keyword, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 274, to = 277},MetaInfo {aspect = Just (Name (Just Postulate) False), otherAspects = [], note = Nothing, definitionSite = Just (TopLevelModuleName {moduleNameParts = ["Foo"]},274)}),(Range {from = 278, to = 279},MetaInfo {aspect = Just Symbol, otherAspects = [], note = Nothing, definitionSite = Nothing}),(Range {from = 280, to = 283},MetaInfo {aspect = Just PrimitiveType, otherAspects = [], note = Nothing, definitionSite = Nothing})]}, iPragmaOptions = [["--no-universe-polymorphism"],["--without-K"]], iPatternSyns = fromList []}
>>>2
>>>= 0

#8. --dump-types
dist/build/apia/apia -itest/options --dump-types test/options/Foo.agda
<<<
>>>
Qname: Foo.foo
Type: El {getSort = Type (Max [ClosedLevel 1]), unEl = Sort (Type (Max []))}

>>>2
>>>= 0
